---
# GitHub Actions CI pipeline definition
name: CI pipeline

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check conventional commits
        uses: wagoid/commitlint-github-action@v2

      - name: Run shellcheck for all shell scripts in this repo
        run: find . -type f -and -name "*.sh" -exec shellcheck {} \;

      - name: Check YAML files
        uses: ibiqlik/action-yamllint@v3.1.0
        with:
          file_or_dir: kubernetes/ helm/

      - name: Kubernetes manifests validation (kubeval)
        uses: lra/setup-kubeval@v1.0.1
      - run: |
          LOCATION="https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master"
          kubeval --schema-location "${LOCATION}" -d "./kubernetes/"

      - name: Kubernetes manifests validation (kube-score)
        uses: piraces/kube-score-ga@v0.1.2
        with:
          manifests-folders: './kubernetes/*.yml'
          ignore-exit-code: true # FixMe: Remove ignoring when output will be clear

  test:
    needs: [lint]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set shell scripts executable
        run: find . -type f -and -name "*.sh" -exec chmod u+x {} \;

      - name: Set git global config due to git clone script
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          echo -en "machine github.com\nlogin JanMate\npassword ${{ secrets.JM_GITHUB_TOKEN }}" \
            > ~/.netrc

      - name: Run all shell scripts in this repo
        run: |
          find . \
            -type f \
            -and \( -name "*.sh" -and -not -name "run_docker.sh" \) \
            -exec bash -c {} \;
          ./run_docker.sh "${{ secrets.JM_DOCKER_USERNAME }}" "${{ secrets.JM_DOCKER_TOKEN }}"

      - name: Clean git global config due to git clone script
        run: |
          git config --global --unset user.name
          git config --global --unset user.email
          rm -f ~/.netrc

      - name: Kubernetes manifests dry-run verification
        if: 'false' # skip so far until a k8s cluster will be available
        uses: actions-hub/kubectl@v1.21.2
        with:
          args: apply -f ./kubernetes/ --dry-run

      - name: Kubernetes manifests server-dry-run verification
        if: 'false' # skip so far until a k8s cluster will be available
        uses: actions-hub/kubectl@v1.21.2
        with:
          args: apply -f ./kubernetes/ --server-dry-run

  prerelease:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'push' && github.ref == 'refs/heads/main') }}

    env:
      PROJECT_NAME: happy-bank

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: go version

      - name: Semantic Version install
        run: |
          curl -s https://api.github.com/repos/bvieira/sv4git/releases/latest | jq -r '.assets[] | select(.browser_download_url | contains("linux")) | .browser_download_url' | wget -O /tmp/sv4git.tar.gz -qi - \
            && tar -C /usr/local/bin -xzf /tmp/sv4git.tar.gz

      - name: Show local tags and fetch remote tags
        run: |
          git fetch --tags
          git tag -l

      - name: Show current version
        run: git-sv current-version

      - name: Show next version
        run: |
          NEXT_VERSION="$(git-sv next-version)"
          echo "${NEXT_VERSION}"
          echo -n "next_version=${NEXT_VERSION}" >> $GITHUB_ENV

      - name: Create artifact name
        run: |
          ARTIFACT_NAME="${{ env.PROJECT_NAME }}-v${{ env.next_version }}-prerelease"
          echo "${ARTIFACT_NAME}"
          echo -n "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Pack repo to zip
        run: |
          FOLDERS=("./helm/" "./kubernetes/")
          SCRIPTS=("./clone_update_repo.sh" "./deploy.sh" "./run_docker.sh")
          zip -r ${{ env.artifact_name }}.zip ${FOLDERS[@]} ${SCRIPTS[@]}

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}.zip
          path: ./${{ env.artifact_name }}.zip

  release:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    env:
      PROJECT_NAME: happy-bank

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: go version

      - name: Semantic Version install
        run: |
          curl -s https://api.github.com/repos/bvieira/sv4git/releases/latest | jq -r '.assets[] | select(.browser_download_url | contains("linux")) | .browser_download_url' | wget -O /tmp/sv4git.tar.gz -qi - \
            && tar -C /usr/local/bin -xzf /tmp/sv4git.tar.gz

      - name: Set git global config due to git clone script
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Show local tags and fetch remote tags
        run: |
          git fetch --tags
          git tag -l

      - name: Show current version
        run: git-sv current-version

      - name: Show next version
        run: |
          NEXT_VERSION="$(git-sv next-version)"
          echo "${NEXT_VERSION}"
          echo -n "next_version=${NEXT_VERSION}" >> $GITHUB_ENV

      - name: Create new tag
        run: git-sv tag

      - name: Create artifact name
        run: |
          ARTIFACT_NAME="${{ env.PROJECT_NAME }}-v${{ env.next_version }}"
          echo "${ARTIFACT_NAME}"
          echo -n "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Pack repo to zip
        run: |
          FOLDERS=("./helm/" "./kubernetes/")
          SCRIPTS=("./clone_update_repo.sh" "./deploy.sh" "./run_docker.sh")
          zip -r ${{ env.artifact_name }}.zip ${FOLDERS[@]} ${SCRIPTS[@]}

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}.zip
          path: ./${{ env.artifact_name }}.zip

      - name: Create release notes
        run: git sv rn -t "$({{ env.next_version }})" > release-notes.md

      - name: Release GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          tag_name: v${{ env.next_version }}
          fail_on_unmatched_files: true
          files: |
            ${{ env.artifact_name }}.zip
