---
# GitHub Actions CI pipeline definition
name: CI pipeline

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check conventional commits
        uses: wagoid/commitlint-github-action@v2

      - name: Run shellcheck for all shell scripts in this repo
        run: find . -type f -and -name "*.sh" -exec shellcheck {} \;

      - name: Check YAML files
        uses: ibiqlik/action-yamllint@v3.1.0

      - name: Kubernetes manifests validation (kubeval)
        uses: lra/setup-kubeval@v1.0.1
      - run: kubeval ./kubernetes/*.yml

      - name: Kubernetes manifests validation (kube-score)
        uses: piraces/kube-score-ga@v0.1.2
        with:
          manifests-folders: './kubernetes/*.yml'
          ignore-exit-code: true # FixMe: Remove ignoring when output will be clear

  test:
    needs: [lint]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set shell scripts executable
        run: find . -type f -and -name "*.sh" -exec chmod u+x {} \;

      - name: Set git global config due to git clone script
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          echo -en "machine github.com\nlogin JanMate\npassword ${{ secrets.JM_GITHUB_TOKEN }}" \
            > ~/.netrc

      - name: Run all shell scripts in this repo
        run: |
          find . \
            -type f \
            -and \( -name "*.sh" -and -not -name "run_docker.sh" \) \
            -exec bash -c {} \;
          ./run_docker.sh "${{ secrets.JM_DOCKER_USERNAME }}" "${{ secrets.JM_DOCKER_TOKEN }}"

      - name: Clean git global config due to git clone script
        run: |
          git config --global --unset user.name
          git config --global --unset user.email
          rm -f ~/.netrc

      - name: Kubernetes manifests dry-run verification
        if: 'false' # skip so far until a k8s cluster will be available
        uses: actions-hub/kubectl@v1.21.2
        with:
          args: apply -f ./kubernetes/ --dry-run

      - name: Kubernetes manifests server-dry-run verification
        if: 'false' # skip so far until a k8s cluster will be available
        uses: actions-hub/kubectl@v1.21.2
        with:
          args: apply -f ./kubernetes/ --server-dry-run

  release:
    needs: [lint, test]
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: happy-bank

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      - run: go version

      - name: Semantic Version install
        run: go install github.com/bvieira/sv4git/v2/cmd/git-sv@v2.5.0

      - name: Show current version
        run: git-sv current-version

      - name: Show next version
        run: |
          NEXT_VERSION="$(git-sv next-version)"
          echo "${NEXT_VERSION}"
          echo -n "next_version=${NEXT_VERSION}" >> $GITHUB_ENV

      - name: Create build number
        run: |
          BUILD_NO="$(echo -n ${{ github.sha }} | head -c 8)"
          echo -n "build_no=${BUILD_NO}" >> $GITHUB_ENV

      - name: Set git global config due to git clone script
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: Create tag with build number
        run: |
          [[ ${{ github.event_name }} == 'push' && ${{ github.ref }} == 'refs/heads/main' ]] \
            && TAG_BUILD_NO="${{ env.next_version }}" \
            || TAG_BUILD_NO="${{ env.next_version }}-${{ env.build_no }}"
          echo "$TAG_BUILD_NO"
          echo -n "tag_build_no=${TAG_BUILD_NO}" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag \
            -a "${{ env.tag_build_no }}" \
            -m "$PROJECT_NAME ${{ env.tag_build_no }}"
          git push origin "${{ env.tag_build_no }}"

      - name: Create artifact name
        run: |
          ARTIFACT_NAME="${{ env.PROJECT_NAME }}-${{ env.tag_build_no }}"
          echo "${ARTIFACT_NAME}"
          echo -n "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Clean git global config due to git clone script
        run: |
          git config --global --unset user.name
          git config --global --unset user.email

      - name: Pack repo to zip
        run: |
          FOLDERS=("./helm/" "./kubernetes/")
          SCRIPTS=("./clone_update_repo.sh" "./deploy.sh" "./run_docker.sh")
          zip -r ${{ env.artifact_name }}.zip ${FOLDERS[@]} ${SCRIPTS[@]}

      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}.zip
          path: ./${{ env.artifact_name }}.zip
