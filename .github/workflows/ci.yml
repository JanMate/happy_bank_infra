name: On PR pipeline

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Run shellcheck for all shell scripts in this repo
        run: find . -type f -and -name "*.sh" -exec shellcheck {} \;
      
  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set shell scripts executable
        run: find . -type f -and -name "*.sh" -exec chmod u+x {} \;

      - name: Set git global config due to git clone script
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          echo -en "machine github.com\nlogin JanMate\npassword ${{ secrets.JM_GITHUB_TOKEN }}" > ~/.netrc
      
      - name: Run all shell scripts in this repo
        run: |
          find . -type f -and \( -name "*.sh" -and -not -name "run_docker.sh" \) -exec bash -c {} \;
          ./run_docker.sh "${{ secrets.JM_DOCKER_USERNAME }}" "${{ secrets.JM_DOCKER_TOKEN }}"
      
      - name: Clean git global config due to git clone script
        run: |
          git config --global --unset user.name
          git config --global --unset user.email
          rm -f ~/.netrc

  release:
    needs: test
    runs-on: ubuntu-latest
   
    env:
      PROJECT_NAME: happy-bank

    steps:
      - uses: actions/checkout@v2

#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.8

      - name: Create build number
        id: build-no
        if: github.event_name != 'push' || github.ref != 'refs/heads/master'
        run: |
          BUILD_NO="$(echo -n ${{ github.sha }} | head -c 8)"
          echo -n "build_no=${BUILD_NO}" >> $GITHUB_ENV
      
      - name: Semantic Release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
#        FixMe !!!
#        run: |
#          pip install python-semantic-release
#          git config user.name github-actions
#          git config user.email github-actions@github.com
#          RELEASE_VERSION=$(semantic-release print-version)
#          echo -n "new_release_version=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Pack repo to tarball
#        if: steps.semrel.outputs.version != ''
        run: |
          PROJECT_NAME=${{ env.PROJECT_NAME }}
          RELEASE_VERSION=${{ steps.semrel.outputs.version }}
          BUILD_NO=${{ env.build_no }}
          if [[ -n ${BUILD_NO} ]]; then
            TARBALL_NAME=${PROJECT_NAME}-${RELEASE_VERSION}-${BUILD_NO}.tgz
          else
            TARBALL_NAME=${PROJECT_NAME}-${RELEASE_VERSION}.tgz
          fi
          echo -n "tarball_name=${TARBALL_NAME}" >> $GITHUB_ENV
          tar -cvzf . "${TARBALL_NAME}"

      - name: Publish artifact
        uses: actions/upload-artifact@v2
#        if: steps.semrel.outputs.version != ''
        with:
          name: ${{ env.tarball_name }}
          path: ./${{ env.tarball_name }}
